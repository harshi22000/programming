class Solution {
public:


// Dont use this...this takes extra time to get executed..so always write this in dfs function only.
    bool isValid(int i,  int j, int n, int m, vector<vector<int>> grid)
    {
        if(i>=0 && j>=0 && j<m && i<n && grid[i][j]==0)
            return true;

        return false;
    }

    void dfs(int i, int j, int n, int m, vector<vector<int>>& grid)
    {
        if(i>=0 && j>=0 && j<m && i<n && grid[i][j]==0)
        {
            grid[i][j]=1;
            dfs(i,j-1,n,m,grid);
            dfs(i,j+1,n,m,grid);
            dfs(i+1,j,n,m,grid);
            dfs(i-1,j,n,m,grid);
        }
        return;
    }

    int closedIsland(vector<vector<int>>& grid) 
    {
        int n= grid.size();
        int m = grid[0].size();

        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if((i*j==0 || i==(n-1) || j==(m-1)) && grid[i][j]==0)
                    dfs(i,j,n,m,grid);
            }
        }


        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==0)
                {
                    ans++;
                    dfs(i,j,n,m,grid);
                }
            }
        }
        return ans;
    }
};
