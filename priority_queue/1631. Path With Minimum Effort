class Solution {
public:   

    int minimumEffortPath(vector<vector<int>>& h) 
    {
        int n= h.size();
        int m= h[0].size();
        vector<vector<int>> eff(n,vector<int>(m,1e9));

        priority_queue<pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>>, greater<pair<int,pair<int,int>>>> pq;
        pq.push({0,{0,0}});

        eff[0][0]=0;

        while(!pq.empty())
        {
            int effort= pq.top().first;

            int row= pq.top().second.first;
            int col= pq.top().second.second;

            pq.pop();
            int drow[]={-1,1,0,0};
            int dcol[]={0,0,1,-1};

            if(row==(n-1) && col==(m-1))
                return effort;

            for(int i=0;i<4;i++)
            {
                int row1= row+ drow[i];
                int col1= col+ dcol[i];
                if(row1>=0 && row1<n && col1>=0 && col1<m)
                {
                    int neweff= max(effort, abs(h[row1][col1]- h[row][col]));
                    if(neweff< eff[row1][col1])
                    {
                        eff[row1][col1]= neweff;
                        pq.push({neweff,{row1,col1}});
                    }
                }
            }
                
        }
        return 0;       
    }
};
